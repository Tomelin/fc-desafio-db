package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/Tomelin/fc-desafio-db/clean-architecture/internal/infra/handler/graphql/graph/model"
)

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	result, err := r.Service.FindAll()
	if err != nil {
		return nil, err
	}

	var orders []*model.Order

	for _, v := range result {
		cat := int(v.Order.Category)
		
		o := &model.Order{
			ID:          v.ID,
			Name:        v.Order.Name,
			Description: &v.Order.Description,
			Stock:       int(v.Order.Stock),
			Price:       float64(v.Order.Price),
			Amount:      int(v.Order.Amount),
			Category:    &cat,
		}

		orders = append(orders, o)
	}

	return orders, nil
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id string) (*model.Order, error) {
	result, err := r.Service.FindByID(&id)
	if err != nil {
		return nil, err
	}

	cat := int(result.Order.Category)
	return &model.Order{
		ID: result.ID,
		Name:        result.Order.Name,
		Description: &result.Order.Description,
		Stock:       int(result.Order.Stock),
		Price:       float64(result.Order.Price),
		Amount:      int(result.Order.Amount),
		Category:    &cat,		
	},nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
